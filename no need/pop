from typing import Union
from fastapi import FastAPI
import requests
from requests.auth import HTTPBasicAuth
import requests

app = FastAPI()
transitland_api_key = "9LmEldNXzFA6Z0YnclJCOtZLALm77L7q"

# https://shiny-rotary-phone-gjw45j64799h95jg-8000.app.github.dev/filteredStops?lat=53.45797055&lon=-113.37121373587301&radius=2000&route_type=3
# https://shiny-rotary-phone-gjw45j64799h95jg-8000.app.github.dev/filteredStops?lat=53.45355045&lon=-113.59592569403735&radius=2000&route_type=3

@app.get("/filteredStops")
async def get_actual_stops(lat: float, lon: float, radius: int, route_type: int):
    headers = {"apikey": transitland_api_key}

    # Make API request
    res = requests.get(f'https://transit.land/api/v2/rest/stops?lat={lat}&lon={lon}&radius={radius}&route_type={route_type}',headers=headers)

    try:
        response = res.json()
    except Exception as e:
        return 0;

    # Ensure 'stops' key exists
    if "stops" not in response:
        return {"error": "Invalid", "response": response}

    filtered_response = []
    for stop in response["stops"]:
        if "geometry" not in stop or "coordinates" not in stop["geometry"] or "id" not in stop or "stop_name" not in stop:
            continue
        coord = stop["geometry"]["coordinates"]
        stop_id = stop["onestop_id"]
        stop_name = stop["stop_name"]
        filtered_response.append({"id": stop_id, "name": stop_name, "coordinates": coord})

    return {"stops": filtered_response}



@app.get("/filteredDepart")
async def get_actual_departure(stop_key: str):
    headers = {"apikey": transitland_api_key}

    res = requests.get(f'https://transit.land/api/v2/rest/stops/{stop_key}/departures', headers=headers)

    if res.status_code != 200:
        return {"error": "Failed to fetch data", "status_code": res.status_code, "response": res.text}

    try:
        response = res.json()
    except Exception as e:
        return {"error": "Failed to parse JSON response", "details": str(e), "response_text": res.text}

    # Ensure "stops" key exists and has at least one stop
    if "stops" not in response or not response["stops"]:
        return {"error": "No stops found for this stop key", "response": response}

    # Extract first stop
    first_stop = response["stops"][0]

    # Ensure "departures" key exists and has at least one departure
    if "departures" not in first_stop or not first_stop["departures"]:
        return {"error": "No departures found for this stop", "response": first_stop}

    # Get the first departure
    first_departure = first_stop["departures"][0]

    # Return the first instance of "arrival_time"
    if "arrival_time" in first_departure:
        return {"arrival_time": first_departure["arrival_time"]}

    return {"error": "No arrival_time found in the first departure"}
